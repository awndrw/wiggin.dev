import fs from "fs";
import path from "path";

import fg from "fast-glob";
import { resolveConfig, format as prettierFormat } from "prettier";

const TYPES_DIR = "src/.types";

async function format(content: string) {
  const config = await resolveConfig(process.cwd());
  return prettierFormat(content, { ...config, parser: "typescript" });
}

async function generateTypes(name: string, generator: () => Promise<string>) {
  const filePath = path.join(TYPES_DIR, `${name}.ts`);
  const types = await generator();
  const fileContent = await format(
    `/* This file is generated by scripts/generateTypes.ts */
    ${types}`
  );
  fs.mkdir(path.dirname(filePath), { recursive: true }, (err) => {
    if (err) throw err;
    fs.writeFile(filePath, fileContent, (err) => {
      if (err) throw err;
    });
  });
}

(async () => {
  const generators = await fg("scripts/typeGenerators/*.ts");
  generators.map(async (generatorPath) => {
    const generatorName = path.basename(generatorPath, ".ts");
    console.log(`Generating ${generatorName} types`);
    const generator = await import(`./typeGenerators/${generatorName}`).then(
      (m) => m.default
    );
    await generateTypes(generatorName, generator);
    console.log(`Generated ${TYPES_DIR}/${generatorName}.ts`);
  });
})();
