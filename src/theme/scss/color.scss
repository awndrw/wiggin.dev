@use 'sass:map';

$text-primary: var(--color-text-primary);
$text-secondary: var(--color-text-secondary);
$background: var(--color-background);
$accent-primary: var(--color-accent-primary);
$accent-primary-contrast: var(--color-accent-primary-contrast);
$accent-container: var(--color-accent-container);
$accent-container-contrast: var(--color-accent-container-contrast);
$accent-tint: var(--color-accent-tint);
$accent-tint-contrast: var(--color-accent-tint-contrast);

$lightnesses: (
        'light': (
                'text-primary': 30%,
                'text-secondary': 64%,
                'background': 100%,
        ),
        'dark': (
                'text-primary': 92%,
                'text-secondary': 78%,
                'background': 22%,
        ),
);

$chroma: 0;
$hue: 0;

@mixin make-mode($mode) {
  @each $color, $lightness in map.get($lightnesses, $mode) {
    --color-#{$color}: oklch(#{$lightness} #{$chroma} #{$hue});
  }
}

$gradient-steps: 0, 45deg, 90deg, 135deg, 180deg, 225deg, 270deg, 315deg, 360deg;
$gradientLightnessAndChroma: (
        'light': 0.56 0.15,
        'dark': 0.88 0.064,
);

@mixin make-gradients($mode) {
  @for $i from 1 through length($gradient-steps) {
    $step: nth($gradient-steps, $i);
    $lc: map.get($gradientLightnessAndChroma, $mode);
    --gradient-#{$i}: oklch(#{$lc} #{$step});
  }
}

@mixin all {
  &, & ::before, & ::after {
    @content;
  }
}

@mixin init {
  @include all {
    color-scheme: light;
    @include make-mode('light');
    @include make-gradients('light');

    @media (prefers-color-scheme: dark) {
      color-scheme: dark;
      @include make-mode('dark');
      @include make-gradients('dark');
    }
  }

  body[data-mode='light'] {
    @include all {
      color-scheme: light;
      @include make-mode('light');
      @include make-gradients('light');
    }
  }

  body[data-mode='dark'] {
    @include all {
      color-scheme: dark;
      @include make-mode('dark');
      @include make-gradients('dark');
    }
  }
}
